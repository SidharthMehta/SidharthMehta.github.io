{
    "skills": [
        {
            "name": "Programming",
            "keywords": [
                "Assembly",
                "C",
                "C++",
                "C#",
                "Verilog",
                "Shell scripting",
                "C#",
                "RTX5 RTOS",
                "OpenMP",
                "POSIX Pthreads",
                "Ruby on Rails",
                "RSpec",
                "Lex",
                "Yacc"
            ]
        },
        {
            "name": "Microcontroller",
            "keywords": [
                "Cortex-M",
                "AVR",
                "PIC",
                "Raspberry Pi"
            ]
        },
        {
            "name": "Communication Protocols",
            "keywords": [
                "USB",
                "SPI",
                "I2C",
                "UART"
            ]
        },
        {
            "name": "Tools",
            "keywords": [
                "LLVM",
                "XINU OS",
                "WSL",
                "Linux",
                "Perf",
                "Ghidra",
                "GCC",
                "GDB",
                "GNU Make",
                "Git"
            ]
        },
        {
            "name": "Other",
            "keywords": [
                "Circuit Designing",
                "Logic analyzer",
                "Oscilloscope",
                "Code Optimization",
                "Compiler Optimization",
                "Circuit Debugging",
                "Software Debugging"
            ]
        }
    ],
    "projects": [
        {
            "name": "Speed optimization of Linux based Embedded Systems",
            "image": "images/perf.png",
            "info": "Increased execution speed of a Spherical Geometry calculation code by 4.95 times against a goal of 3.7 times on a Cortex-A72 processor. The code uses trigonometric functions to calculate distance and bearing angle between points. Used perf tool to generate profiling information for code and applied appropriate optimizations.",
            "url": "./documents/speed-optimization-linux.pdf"
        },
        {
            "name": "USB Touch Keyboard",
            "image": "images/keyboard.gif",
            "info": "Implemented a USB Mouse and Keyboard using FRDM KL25Z development board. The device registers keystrokes from a touchscreen and uses the onboard accelerometer to register motion for mouse support. The code uses HID protocol of the USB stack to communicate with host device.",
            "url": "https://github.com/SidharthMehta/USB-keyboard"
        },
        {
            "name": "Touchscreen control of LED brightness using RTOS",
            "image": "images/ts-brightness.gif",
            "info": "Shared access of ADC using Preemptive scheduling to get touch input from touchscreen and current measurement from buck converter in a time critical manner. Project also involved displaying current plot on the LCD.",
            "url": ""
        },
        {
            "name": "Motion detector program using non preemptive scheduling",
            "image": "images/motion.gif",
            "info": "Improved responsiveness of a motion detector program using non preemptive scheduling. The program reads data from an accelerometer over I2C and blinks an RGB led to indicate motion.",
            "url": ""
        },
        {
            "name": "fork system call on XINU OS",
            "image": "images/fork.png",
            "info": "Implemented a fork system call similar to Unix‚Äôs fork on XINU. The fork primitive creates a new process (the child) by almost duplicating the parent process.",
            "url": ""
        },
        {
            "name": "C-- Bitcode generator",
            "image": "images/llvm.png",
            "info": "Implemented C-- a subset of C programming language using parser generators Flex & Bison to generate code in LLVM IR.",
            "url": ""
        },
        {
            "name": "Memory size optimization of Embedded Systems",
            "image": "images/memory.png",
            "info": "Reduced the amount of memory needed for an RTOS-based application on Cortex-M based processor. Reduction of RAM and ROM by 2348 bytes and 3000 bytes, respectively.",
            "url": ""
        },
        {
            "name": "Speed optimization of Embedded System",
            "image": "images/speedup.gif",
            "info": "Achieved 4.3x improvement in execution speed of a program which decodes and displays on the LCD all JPEG images in the root directory of a uSD card.",
            "url": ""
        },
        {
            "name": "Cache Simulator",
            "image": "images/cache.png",
            "info": "Project Implements a flexible cache and memory hierarchy simulator and uses it to study the performance of memory hierarchies using the SPEC benchmarks.",
            "url": "https://github.com/SidharthMehta/Cache-Simulator"
        },
        {
            "name": "Branch prediction simulator",
            "image": "images/bpb.png",
            "info": "Designed a branch predictor simulator and use it to design branch predictors (bi-modal, gShare, hybrid) with Branch Target buffer well suited to the SPECint95 benchmarks.",
            "url": "https://github.com/SidharthMehta/Branch-Predicton-Simulator"
        },
        {
            "name": "Dynamic Instruction Scheduling Simulator",
            "image": "images/Tomasulo algorithm.jpg",
            "info": "Constructed a simulator for an out-of-order superscalar processor based on Tomasulo‚Äôs algorithm that fetches, dispatches, and issues N instructions per cycle.",
            "url": "https://github.com/SidharthMehta/Dynamic-Instruction-Scheduling-Simulator"
        },
        {
            "name": "Tanh Unit for LSTM cell",
            "image": "images/tanh.jpg",
            "info": "Designed and Synthesized a Tanh gate for LSTM cell, a type of neural network using RTL. The output of g(t) is ùë°ùëéùëõ‚Ñé(Œ£(ùëäùëî‚àóùë•ùëñ)), where ùëäùëî is a weight matrix and ùë•ùëñ is an input vector. The goal of project was to achieve least area and execution time product.",
            "url": "https://github.com/SidharthMehta/Tanh-unit"
        },
        {
            "name": "Braille reader",
            "image": "images/braille.png",
            "info": "Fabricated a device to convert text feed from a computer into braille text on a physical device. The device uses 2 motors to control braille characters mounted on a wheel to change characters.",
            "url": "./documents/braille-display-report.pdf"
        }
    ]
}